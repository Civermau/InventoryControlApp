@page
@using Microsoft.EntityFrameworkCore
@using Microsoft.EntityFrameworkCore.ChangeTracking
@model InventoryControlPages.UserModel
@addTagHelper *,Microsoft.AspNetCore.Mvc.TagHelpers
@using AlmacenSQLiteEntities;
@using AlmacenDataContext;
@using InventoryControl.UI;

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Inventory</title>
    <link rel="stylesheet" href="~/styles.css">
    <script src="~/script.js" defer></script>
</head>
<body>
    <div class="welcome-init">
        <div class="welcome-title titles">
            <p>Bienvenido al Almacen</p>
        </div>
        <div id="loginFormContainer" class="form-container">
            <br>
            <p id="in" onclick="toggleForm('loginForm')">Log In</p>
            <div class="in-database">
                <div id="loginForm" class="form">
                    <p>Inicie sesión</p>
                    <form method="POST" asp-page-handler="LogIn">
                        <div class="fields-table">
                            <input asp-for="usuario.Usuario1" placeholder="Nombre de Usuario" class="form-control">
                            <span asp-validation-for="usuario.Usuario1" class="text-danger"></span>
                            @{
                                if(Model.usuario is not null){
                                    var result = UI.LogIn(Model.usuario.Usuario1, Model.usuario.Password);
                                    if(result.typeOfUser == 0){
                                        <span class="text-danger">Usuario o contraseña incorrectos. Inténtalo nuevamente.</span>
                                    }
                                }
                            }

                            <input asp-for="usuario.Password" placeholder="Contraseña" class="form-control" type="password" id="passwordInput" required>
                            <span asp-validation-for="usuario.Password" class="text-danger"></span>
                            <input id="enviar" type="submit" />
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <div id="signinFormContainer" class="form-container">
            <br>
            <p onclick="toggleForm('signinForm')">Sign In</p>
            <div class="in-database">
                <div id="signinForm" class="form">
                    <p>Registre su Usuario</p>
                    <form method="POST" asp-page-handler="SignIn">
                        <div class="fields-table">
                            <input asp-for="estudiante.EstudianteId" placeholder="Registro" class="form-control" required>
                            <span asp-validation-for="estudiante.EstudianteId" class="text-danger"></span>
                            @{
                                if(Model.estudiante is not null){
                                    int validationRegister = UI.RegisterValidation(Model.estudiante.EstudianteId);
                                    switch (validationRegister)
                                    {
                                        case 10:
                                            <span class="text-danger">El campo Registro debe tener 8 dígitos.</span>
                                            break;
                                        case 20:
                                            <span class="text-danger">El año en el campo Registro no puede ser mayor al año actual.</span>
                                            break;
                                        case 30:
                                            <span class="text-danger">El campo Registro debe comenzar con '100' o '300'.</span>
                                            break;
                                        case 01:
                                            // No hay error, proceder con la lógica normal
                                            break;
                                    }
                                }
                            }

                            <input asp-for="estudiante.Nombre" placeholder="Nombre" class="form-control" required>
                            <span asp-validation-for="estudiante.Nombre" class="text-danger"></span>

                            <input asp-for="estudiante.ApellidoPaterno" placeholder="Apellido paterno" class="form-control" required>
                            <span asp-validation-for="estudiante.ApellidoPaterno" class="text-danger"></span>

                            <input asp-for="estudiante.ApellidoMaterno" placeholder="Apellido materno" class="form-control" required>
                            <span asp-validation-for="estudiante.ApellidoMaterno" class="text-danger"></span>

                            <select id="list" asp-for="estudiante.SemestreId" class="fields-table" required>
                                <option value="">Selecciona un semestre</option>
                                <option value="1">1</option>
                                <option value="2">2</option>
                                <option value="3">3</option>
                                <option value="4">4</option>
                                <option value="5">5</option>
                                <option value="6">6</option>
                                <option value="7">7</option>
                                <option value="8">8</option>
                            </select>
                            <span asp-validation-for="estudiante.SemestreId" class="text-danger"></span>

                            <select asp-for="estudiante.GrupoId" placeholder="Grupo" class="fields-table" required>
                                @{
                                    using (Almacen db = new Almacen())
                                    {
                                        List<Grupo> grupos = db.Grupos.ToList();

                                        foreach (var grupo in grupos)
                                        {
                                            <option value="@grupo.GrupoId">@grupo.Nombre</option>
                                        }
                                    }
                                }
                            </select>
                            <span asp-validation-for="estudiante.GrupoId" class="text-danger"></span>

                            <input asp-for="estudiante.Correo" placeholder="Correo" class="form-control" required>
                            <span asp-validation-for="estudiante.Correo" class="text-danger"></span>
                            @{
                                if(Model.estudiante is not null){
                                    int validationEmail = UI.StudentEmailValidation(Model.estudiante.Correo, Model.estudiante.EstudianteId);
                                    switch (validationEmail)
                                    {
                                        case 10:
                                            <span class="text-danger">El correo debe contener 17 caracteres, ejemplo: 'a19300107@ceti.mx'</span>
                                            break;
                                        case 20:
                                            <span class="text-danger">El correo debe contener la letra a al inicio del mismo</span>
                                            break;
                                        case 30:
                                            <span class="text-danger">El correo debe contener el registro proporcionado</span>
                                            break;
                                        case 40:
                                            <span class="text-danger">El correo debe contener la terminación 'ceti.mx'</span>
                                            break;
                                        case 50:
                                            <span class="text-danger">El correo debe contener 17 caracteres, ejemplo: 'a19300107@ceti.mx'</span>
                                            break;
                                        case 70:
                                            <span class="text-danger">El correo debe contener el registro proporcionado</span>
                                            break;
                                        case 80:
                                            <span class="text-danger">El correo debe contener la terminación 'ceti.mx'</span>
                                            break;
                                        case 90:
                                            <span class="text-danger">Formato de Correo Incorrecto</span>
                                            break;
                                        case 100:
                                            <span class="text-danger">El correo debe contener la terminación 'ceti.mx'</span>
                                            break;
                                        case 01:
                                            // No hay error, proceder con la lógica normal
                                            break;
                                    }
                                }
                            }

                            <select asp-for="estudiante.PlantelId" class="fields-table" required>
                                <option value="">Selecciona un plantel</option>
                                <option value="1">Colomos</option>
                                <option value="2">Tonála</option>
                                <option value="3">Rio Santiago</option>
                            </select>
                            <span asp-validation-for="estudiante.PlantelId" class="text-danger"></span>
                            
                            <input asp-for="usuario.Password" placeholder="Contraseña" type="password" id="passwordInput" required>
                            <span asp-validation-for="usuario.Password" class="text-danger"></span>
                            @{
                                if(Model.usuario is not null){
                                    int validationPassword = UI.PasswordValidation(Model.usuario.Password);
                                    switch (validationPassword)
                                    {
                                        case 10:
                                            <span class="text-danger">La contraseña es muy corta. Debe tener al menos 8 caracteres.</span>
                                            break;
                                        case 20:
                                            <span class="text-danger">La contraseña debe contener al menos un caracter en mayusculas.</span>
                                            break;
                                        case 30:
                                            <span class="text-danger">La contraseña debe contener al menos un caracter numerico.</span>
                                            break;
                                        case 40:
                                            <span class="text-danger">La contraseña debe contener al menos un caracter especial no alfanumérico.</span>
                                            break;
                                        case 50:
                                            <span class="text-danger">La contraseña debe contener al menos un caracter en minúsculas.</span>
                                            break;
                                        case 80:
                                            <span class="text-danger">La contraseña es muy común o fácil de adivinar.</span>
                                            break;
                                        case 90:
                                            <span class="text-danger">La contraseña debe contener al menos un caracter no alfanumérico.</span>
                                            break;
                                        case 100:
                                            <span class="text-danger">La contraseña debe contener una combinación de mayúsculas y minúsculas.</span>
                                            break;
                                        case 01:
                                            // No hay error, proceder con la lógica normal
                                            break;
                                    }
                                }
                            }

                            <input id="enviar" type="submit" />
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
    <form method="POST" asp-page-handler="Pass">
        <div class="fields-table">
            <input type="submit" value="Olvide mi contraseña"/>
        </div>
    </form>
</body>
</html>